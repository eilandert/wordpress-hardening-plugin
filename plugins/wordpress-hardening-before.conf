# ------------------------------------------------------------------------
# OWASP ModSecurity Core Rule Set Plugin
# Copyright (c) 2021-2022 Core Rule Set project. All rights reserved.
#
# The OWASP ModSecurity Core Rule Set plugins are distributed under
# Apache Software License (ASL) version 2
# Please see the enclosed LICENSE file for full details.
# ------------------------------------------------------------------------

# OWASP CRS Plugin
# Plugin name: template-plugin
# Plugin description: Example plugin. Use and adopt this for your own plugins.
# Rule ID block base: 9,522,000-9,522,999
# Plugin version: 1.0.0

#Generic rule to disable plugin
SecRule TX:wordpress-hardening-plugin_enabled "@eq 0" "id:9522099,phase:1,pass,nolog,ctl:ruleRemoveById=9522100-9522999"

#Check if variable exist and if not, set default
SecRule &TX:wphard.block_xmlrpc "@eq 0" \
  "id:9522012,\
  phase:1,\
  pass,\
  nolog,\
  setvar:tx.wphard.block_xmlrpc=1"

#Check if variable exist and if not, set default
SecRule &TX:wphard.block_user_enumeration "@eq 0" \
  "phase:1,\
  id:9522014,\
  pass,\
  nolog,\
  setvar:tx.wphard.block_user_enumeration=1"

#Check if variable exist and if not, set default
SecRule &TX:wphard.block_rest_api "@eq 0" \
  "phase:1,\
  id:9522016,\
  pass,\
  nolog,\
  setvar:tx.wphard.block_rest_api=0"

#Check if variable exist and if not, set default
SecRule &TX:wphard.block_admin_login "@eq 0" \
  "phase:1,\
  id:9522018,\
  pass,\
  nolog,\
  setvar:tx.wphard.block_admin_login=1"

#Check if variable exist and if not, set default
SecRule &TX:wphard.block_wpcron "@eq 0" \
  "phase:1,\
  id:9522020,\
  pass,\
  nolog,\
  setvar:tx.wphard.block_wpcron=0"

# Check if xmlrpc should be blocked and if not, skip. 
# (regression test on default)
SecRule &TX:wphard.block_xmlrpc "@eq 0" \
  "id:9522101,\
  phase:2,\
  pass,\
  nolog,\
  skipAfter:END_WPHARD_XMLRPC"

SecMarker "BEGIN_WPHARD_XMLRPC"

SecRule REQUEST_FILENAME "^/xmlrpc\.php" \
  "id:9522102,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  capture,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'xmlrpc',\
  logdata:'Request Filename %{REQUEST_FILENAME}',\
  msg:'Wordpress hardening: xmlrpc.php access attempt',\
  setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

SecMarker "END_WPHARD_XMLRPC"

# check if user enumaration should be blocked and if not, skip
# (regression test on default)
SecRule TX:wphard.block_user_enumeration "@eq 0" \
  "phase:2,\
  id:9522103,\
  pass,\
  nolog,\
  skipAfter:END_WPHARD_USER_ENUMERATION"

SecMarker "BEGIN_WPHARD_USER_ENUMERATION"

SecRule REQUEST_URI "@rx (author\=[0-9]+)|(wp/v2/users)" \
  "id:9522104,\
  phase:2,\
  block,\
  t:lowercase,t:normalizePath,t:trim,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'enumeration',\
  logdata:'Request URI %{REQUEST_URI}',\
  msg:'Wordpress hardening: user enumeration detected',\
  setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

SecMarker "END_WPHARD_USER_ENUMERATION"

# Check if restapi should be blocked and if not, skip
# (regression test on default)
SecRule TX:wphard.block_rest_api "@eq 0" \
  "phase:2,\
  id:9522106,\
  pass,\
  nolog,\
  skipAfter:END_WPHARD_BLOCK_REST_API"

SecMarker "BEGIN_WPHARD_BLOCK_REST_API"

SecRule REQUEST_FILENAME "@rx ^/wp-json/.+" \
  "id:9522107,\
  phase:2,\
  t:lowercase,t:normalizePath,\
  block,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'rest-api',\
  tag:'wp-json',\
  logdata:'Request FILENAME %{REQUEST_FILENAME}',\
  msg:'Wordpress hardening: /wp-json rest api access detected',\
  setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

SecMarker "END_WPHARD_BLOCK_REST_API"

# Check if admin login should be blocked and if not, skip
# (regression test on default)
SecRule TX:wphard.block_admin_login "@eq 0" \
  "phase:2,\
  id:9522108,\
  pass,\
  nolog,\
  skipAfter:END_WPHARD_BLOCK_ADMIN_LOGIN"

SecMarker "BEGIN_WPHARD_BLOCK_ADMIN_LOGIN"

SecRule REQUEST_URI "@beginsWith /wp-login.php" \
  "id:9522109,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'admin-login',\
  logdata:'detected admin login',\
  msg:'Wordpress hardening: admin login attempt detected',\
    chain"
    SecRule ARGS:log|ARGS:pwd "@streq admin" \
    "setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

SecMarker "END_WPHARD_BLOCK_ADMIN_LOGIN"

# Check if wpcron should be blocked and if not, skip
# (regression test on default)
SecRule TX:wphard.block_wpcron "@eq 0" \
  "id:9522110,\
  phase:2,\
  pass,\
  nolog,\
  skipAfter:END_WPHARD_WPCRON"

SecMarker "BEGIN_WPHARD_WPCRON"

SecRule REQUEST_FILENAME "^/wp-cron\.php" \
  "id:9522111,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  capture,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'wpcron',\
  logdata:'Request Filename %{REQUEST_FILENAME}',\
  msg:'Wordpress hardening: /wp-cron.php access attempt',\
  setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

SecMarker "END_WPHARD_WPCRON"

# No direct access to .php files or directory listings. (PL1)
SecRule REQUEST_FILENAME "@rx ^/wp-(content|includes)/([^/]*/)*[^/.]+(\.php)?$" \
  "id:9522200,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  capture,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  logdata:'Request Filename %{REQUEST_FILENAME}',\
  msg:'Wordpress hardening: Direct access to phpfiles or directory listings in wp-content or wp-includes not allowed',\
  setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Check for inclusion attacks on index.php (PL2)
# (no regression test yet)
SecRule REQUEST_FILENAME "@endsWith /index.php" \
  "id:9522201,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  capture,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'inclusion-attack',\
  msg:'Inclusion attack detected on index.php',\
  logdata:'Request Filename %{REQUEST_FILENAME}',\
  chain"
    SecRule ARGS_GET "@contains %2F" \
      "setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}',\
      chain"
        SecRule ARGS_POST "@contains %2F" \
          "setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# No direct access to these files (PL1)
# (regression test)
SecRule REQUEST_FILENAME "@pmFromFile wordpress-hardening-files.data" \
  "id:9522202,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  logdata:'Request Filename %{REQUEST_FILENAME}',\
  msg:'Wordpress hardening: direct file access attempt on files that dont need that',\
  setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Don't allow other script languages. (PL2)
# (no regression test yet)
SecRule REQUEST_FILENAME "@rx .(pl|cgi|py|sh|lua|asp)$" \
  "id:9522203,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'only-allow-php-extension',\
  logdata:'Request Filename %{REQUEST_FILENAME}',\
  msg:'Wordpress hardening: trying another interpreter',\
  setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"

# Deny certain nasty stuff in uploads (PL1)
# (regression test)
SecRule REQUEST_FILENAME "@rx ^/wp-content/uploads/.*\.(?:s?html?|js|swf|lua)$" \
  "id:9522205,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'uploads',\
  logdata:'Request Filename %{REQUEST_FILENAME}',\
  msg:'Wordpress hardening: attempt to access wp-content/uploads nasty stuff',\
  setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
 
# Deny access to sensitive files (Pl1)
# (regression test)
SecRule REQUEST_FILENAME "@rx \.(conf|htaccess|htpass|sql|orig|bak|db|ini|md|log|git|github|swp$|DS_STORE$)($|/)?" \
  "id:9522206,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'sensitive-files',\
  logdata:'Request Filename %{REQUEST_FILENAME}',\
  msg:'Wordpress hardening: denied access to sensitive files',\
  setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

# Deny access to ^/wp-json$ while api keeps functioning (PL1)
# (regression test)
SecRule REQUEST_FILENAME "@rx ^/wp-json/?$" \
  "id:9522207,\
  phase:2,\
  t:lowercase,t:normalizePath,t:trim,\
  block,\
  severity:'CRITICAL',\
  tag:'wordpress',\
  tag:'sensitive-files',\
  tag:'wp-json',\
  logdata:'Request Filename %{REQUEST_FILENAME}',\
  msg:'Wordpress hardening: denied access to ^/wp-json$',\
  setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
